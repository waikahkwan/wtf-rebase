type Swap @entity {
  id: ID!
  amount0Out: BigInt!
  amount1Out: BigInt!
  amount0In: BigInt!
  amount1In: BigInt!
  to: Bytes!
  pool: Pool!
  type: String!
  reserves0Raw: BigInt!
  reserves1Raw: BigInt!
  reserves0: BigDecimal!,
  reserves1: BigDecimal! 
  priceInUSDRaw: BigInt,
  priceInUSD: BigDecimal, 
  test: BigInt,
  test2: String, 
  test3: String,
  transaction: Transaction!
}

type Token @entity { 
  id: ID!
  symbol: String!,
  decimals: BigInt!
}

type Pool @entity {
  id: ID!
  symbol: String!
  decimals: BigInt!
  token0: Token!
  token1: Token!
  is0Stablecoins: Boolean,
  is1Stablecoins: Boolean,
  tokenWithUSDPrice: String,
  swap: [Swap!]! @derivedFrom(field: "pool")
}

type Transaction @entity {
  id: ID!
  from: String!
  to: String!
  blockNumber: BigInt!
  timestamp: BigInt!
  swap: [Swap!]! @derivedFrom(field: "transaction")
}